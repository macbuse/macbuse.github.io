let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(ale_complete) :ALEComplete
inoremap <silent> <Plug>CocRefresh =coc#_complete()
inoremap <silent> <expr> <C-Space> coc#refresh()
inoremap <expr> <S-Tab> pumvisible() ? "\" : "\"
inoremap <F1> :set invfullscreena
nnoremap <silent>  :TmuxNavigateLeft
nnoremap <silent> <NL> :TmuxNavigateDown
nnoremap <silent>  :TmuxNavigateUp
nnoremap <silent>  :TmuxNavigateRight
nnoremap <silent>  :TmuxNavigatePrevious
omap <silent> % <Plug>(MatchitOperationForward)
xmap <silent> % <Plug>(MatchitVisualForward)
nmap <silent> % <Plug>(MatchitNormalForward)
vnoremap / /\v
nnoremap / /\v
nmap Zt <Plug>(spelunker-toggle-buffer)
nmap ZT <Plug>(spelunker-toggle)
nmap ZP <Plug>(spelunker-jump-prev)
nmap ZN <Plug>(spelunker-jump-next)
nmap ZUW <Plug>(undo-temporary-spelunker-bad-nmap)
vmap ZUW <Plug>(undo-temporary-spelunker-bad)
nmap ZW <Plug>(add-temporary-spelunker-bad-nmap)
vmap ZW <Plug>(add-temporary-spelunker-bad)
nmap Zuw <Plug>(undo-spelunker-bad-nmap)
vmap Zuw <Plug>(undo-spelunker-bad)
nmap Zw <Plug>(add-spell-bad-nmap)
vmap Zw <Plug>(add-spelunker-bad)
nmap ZUG <Plug>(undo-temporary-spelunker-good-nmap)
vmap ZUG <Plug>(undo-temporary-spelunker-good)
nmap ZG <Plug>(add-temporary-spelunker-good-nmap)
vmap ZG <Plug>(add-temporary-spelunker-good)
nmap Zug <Plug>(undo-spelunker-good-nmap)
vmap Zug <Plug>(undo-spelunker-good)
nmap Zg <Plug>(add-spelunker-good-nmap)
vmap Zg <Plug>(add-spelunker-good)
nmap ZF <Plug>(spelunker-correct-all-feeling-lucky)
nmap Zf <Plug>(spelunker-correct-feeling-lucky)
nmap ZC <Plug>(spelunker-correct-all)
nmap Zc <Plug>(spelunker-correct)
nmap ZL <Plug>(spelunker-correct-all-from-list)
nmap Zl <Plug>(spelunker-correct-from-list)
omap <silent> [% <Plug>(MatchitOperationMultiBackward)
xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
vnoremap <silent> \cs "ky:ThesaurusQueryReplace k
nnoremap <silent> \cs :ThesaurusQueryReplaceCurrentWord
map \l :set list! " Toggle tabs and EOL
map \q gqip
map \  :let @/='' " clear search
omap <silent> ]% <Plug>(MatchitOperationMultiForward)
xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
xmap a% <Plug>(MatchitVisualTextObject)
vmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
omap <silent> g% <Plug>(MatchitOperationBackward)
xmap <silent> g% <Plug>(MatchitVisualBackward)
nmap <silent> g% <Plug>(MatchitNormalBackward)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gd <Plug>(coc-definition)
nnoremap j gj
nnoremap k gk
nnoremap <SNR>113_: :=v:count ? v:count : ''
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
vmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
onoremap <silent> <Plug>(MatchitOperationMultiForward) :call matchit#MultiMatch("W",  "o")
onoremap <silent> <Plug>(MatchitOperationMultiBackward) :call matchit#MultiMatch("bW", "o")
vnoremap <silent> <Plug>(MatchitVisualMultiForward) :call matchit#MultiMatch("W",  "n")m'gv``
vnoremap <silent> <Plug>(MatchitVisualMultiBackward) :call matchit#MultiMatch("bW", "n")m'gv``
nnoremap <silent> <Plug>(MatchitNormalMultiForward) :call matchit#MultiMatch("W",  "n")
nnoremap <silent> <Plug>(MatchitNormalMultiBackward) :call matchit#MultiMatch("bW", "n")
onoremap <silent> <Plug>(MatchitOperationBackward) :call matchit#Match_wrapper('',0,'o')
onoremap <silent> <Plug>(MatchitOperationForward) :call matchit#Match_wrapper('',1,'o')
vnoremap <silent> <Plug>(MatchitVisualBackward) :call matchit#Match_wrapper('',0,'v')m'gv``
vnoremap <silent> <Plug>(MatchitVisualForward) :call matchit#Match_wrapper('',1,'v')m'gv``
nnoremap <silent> <Plug>(MatchitNormalBackward) :call matchit#Match_wrapper('',0,'n')
nnoremap <silent> <Plug>(MatchitNormalForward) :call matchit#Match_wrapper('',1,'n')
nnoremap <silent> <Plug>(spelunker-toggle-buffer) :call spelunker#toggle_buffer()
nnoremap <silent> <Plug>(spelunker-toggle) :call spelunker#toggle()
nnoremap <silent> <Plug>(spelunker-jump-prev) :call spelunker#jump_prev()
nnoremap <silent> <Plug>(spelunker-jump-next) :call spelunker#jump_next()
nnoremap <silent> <Plug>(undo-temporary-spelunker-bad-nmap) :call spelunker#execute_with_target_word('spellundo!') :call spelunker#check()
vnoremap <silent> <Plug>(undo-temporary-spelunker-bad) zuW :call spelunker#check()
nnoremap <silent> <Plug>(add-temporary-spelunker-bad-nmap) :call spelunker#execute_with_target_word('spellwrong!') :call spelunker#check()
vnoremap <silent> <Plug>(add-temporary-spelunker-bad) zW :call spelunker#check()
nnoremap <silent> <Plug>(undo-spelunker-bad-nmap) :call spelunker#execute_with_target_word('spellundo') :call spelunker#check()
vnoremap <silent> <Plug>(undo-spelunker-bad) zuw :call spelunker#check()
nnoremap <silent> <Plug>(add-spell-bad-nmap) :call spelunker#execute_with_target_word('spellwrong') :call spelunker#check()
vnoremap <silent> <Plug>(add-spelunker-bad) zw :call spelunker#check()
nnoremap <silent> <Plug>(undo-temporary-spelunker-good-nmap) :call spelunker#execute_with_target_word('spellundo!') :call spelunker#check()
vnoremap <silent> <Plug>(undo-temporary-spelunker-good) zuG :call spelunker#check()
nnoremap <silent> <Plug>(add-temporary-spelunker-good-nmap) :call spelunker#execute_with_target_word('spellgood!') :call spelunker#check()
vnoremap <silent> <Plug>(add-temporary-spelunker-good) zG :call spelunker#check()
nnoremap <silent> <Plug>(undo-spelunker-good-nmap) :call spelunker#execute_with_target_word('spellundo') :call spelunker#check()
vnoremap <silent> <Plug>(undo-spelunker-good) zug :call spelunker#check()
nnoremap <silent> <Plug>(add-spelunker-good-nmap) :call spelunker#execute_with_target_word('spellgood') :call spelunker#check()
vnoremap <silent> <Plug>(add-spelunker-good) zg :call spelunker#check()
nnoremap <silent> <Plug>(spelunker-correct-all-feeling-lucky) :call spelunker#correct_all_feeling_lucky()
nnoremap <silent> <Plug>(spelunker-correct-feeling-lucky) :call spelunker#correct_feeling_lucky()
nnoremap <silent> <Plug>(spelunker-correct-all) :call spelunker#correct_all()
nnoremap <silent> <Plug>(spelunker-correct) :call spelunker#correct()
nnoremap <silent> <Plug>(spelunker-correct-all-from-list) :call spelunker#correct_all_from_list()
nnoremap <silent> <Plug>(spelunker-correct-from-list) :call spelunker#correct_from_list()
nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection
nnoremap <silent> <Plug>(ale_rename) :ALERename
nnoremap <silent> <Plug>(ale_import) :ALEImport
nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation
nnoremap <silent> <Plug>(ale_hover) :ALEHover
nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences
nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinitionIn -vsplit
nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split
nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab
nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition
nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit
nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split
nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab
nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition
nnoremap <silent> <Plug>(ale_fix) :ALEFix
nnoremap <silent> <Plug>(ale_detail) :ALEDetail
nnoremap <silent> <Plug>(ale_lint) :ALELint
nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer
nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer
nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer
nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer
nnoremap <silent> <Plug>(ale_reset) :ALEReset
nnoremap <silent> <Plug>(ale_disable) :ALEDisable
nnoremap <silent> <Plug>(ale_enable) :ALEEnable
nnoremap <silent> <Plug>(ale_toggle) :ALEToggle
nnoremap <silent> <Plug>(ale_last) :ALELast
nnoremap <silent> <Plug>(ale_first) :ALEFirst
nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning
nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning
nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error
nnoremap <silent> <Plug>(ale_next_error) :ALENext -error
nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap
nnoremap <silent> <Plug>(ale_next) :ALENext
nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning
nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning
nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error
nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error
nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap
nnoremap <silent> <Plug>(ale_previous) :ALEPrevious
onoremap <silent> <Plug>(coc-classobj-a) :call coc#rpc#request('selectSymbolRange', [v:false, '', ['Interface', 'Struct', 'Class']])
onoremap <silent> <Plug>(coc-classobj-i) :call coc#rpc#request('selectSymbolRange', [v:true, '', ['Interface', 'Struct', 'Class']])
vnoremap <silent> <Plug>(coc-classobj-a) :call coc#rpc#request('selectSymbolRange', [v:false, visualmode(), ['Interface', 'Struct', 'Class']])
vnoremap <silent> <Plug>(coc-classobj-i) :call coc#rpc#request('selectSymbolRange', [v:true, visualmode(), ['Interface', 'Struct', 'Class']])
onoremap <silent> <Plug>(coc-funcobj-a) :call coc#rpc#request('selectSymbolRange', [v:false, '', ['Method', 'Function']])
onoremap <silent> <Plug>(coc-funcobj-i) :call coc#rpc#request('selectSymbolRange', [v:true, '', ['Method', 'Function']])
vnoremap <silent> <Plug>(coc-funcobj-a) :call coc#rpc#request('selectSymbolRange', [v:false, visualmode(), ['Method', 'Function']])
vnoremap <silent> <Plug>(coc-funcobj-i) :call coc#rpc#request('selectSymbolRange', [v:true, visualmode(), ['Method', 'Function']])
nnoremap <silent> <Plug>(coc-cursors-position) :call coc#rpc#request('cursorsSelect', [bufnr('%'), 'position', 'n'])
nnoremap <silent> <Plug>(coc-cursors-word) :call coc#rpc#request('cursorsSelect', [bufnr('%'), 'word', 'n'])
vnoremap <silent> <Plug>(coc-cursors-range) :call coc#rpc#request('cursorsSelect', [bufnr('%'), 'range', visualmode()])
nnoremap <silent> <Plug>(coc-refactor) :call       CocActionAsync('refactor')
nnoremap <silent> <Plug>(coc-command-repeat) :call       CocAction('repeatCommand')
nnoremap <silent> <Plug>(coc-float-jump) :call       coc#util#float_jump()
nnoremap <silent> <Plug>(coc-float-hide) :call       coc#util#float_hide()
nnoremap <silent> <Plug>(coc-fix-current) :call       CocActionAsync('doQuickfix')
nnoremap <silent> <Plug>(coc-openlink) :call       CocActionAsync('openLink')
nnoremap <silent> <Plug>(coc-references-used) :call       CocActionAsync('jumpUsed')
nnoremap <silent> <Plug>(coc-references) :call       CocActionAsync('jumpReferences')
nnoremap <silent> <Plug>(coc-type-definition) :call       CocActionAsync('jumpTypeDefinition')
nnoremap <silent> <Plug>(coc-implementation) :call       CocActionAsync('jumpImplementation')
nnoremap <silent> <Plug>(coc-declaration) :call       CocActionAsync('jumpDeclaration')
nnoremap <silent> <Plug>(coc-definition) :call       CocActionAsync('jumpDefinition')
nnoremap <silent> <Plug>(coc-diagnostic-prev-error) :call       CocActionAsync('diagnosticPrevious', 'error')
nnoremap <silent> <Plug>(coc-diagnostic-next-error) :call       CocActionAsync('diagnosticNext',     'error')
nnoremap <silent> <Plug>(coc-diagnostic-prev) :call       CocActionAsync('diagnosticPrevious')
nnoremap <silent> <Plug>(coc-diagnostic-next) :call       CocActionAsync('diagnosticNext')
nnoremap <silent> <Plug>(coc-diagnostic-info) :call       CocActionAsync('diagnosticInfo')
nnoremap <silent> <Plug>(coc-format) :call       CocActionAsync('format')
nnoremap <silent> <Plug>(coc-rename) :call       CocActionAsync('rename')
nnoremap <Plug>(coc-codeaction-line) :call       CocActionAsync('codeAction',         'n')
nnoremap <Plug>(coc-codeaction) :call       CocActionAsync('codeAction',         '')
vnoremap <silent> <Plug>(coc-codeaction-selected) :call       CocActionAsync('codeAction',         visualmode())
vnoremap <silent> <Plug>(coc-format-selected) :call       CocActionAsync('formatSelected',     visualmode())
nnoremap <Plug>(coc-codelens-action) :call       CocActionAsync('codeLensAction')
nnoremap <Plug>(coc-range-select) :call       CocActionAsync('rangeSelect',     '', v:true)
vnoremap <silent> <Plug>(coc-range-select-backward) :call       CocActionAsync('rangeSelect',     visualmode(), v:false)
vnoremap <silent> <Plug>(coc-range-select) :call       CocActionAsync('rangeSelect',     visualmode(), v:true)
vnoremap <F1> :set invfullscreen
nnoremap <F1> :set invfullscreen
inoremap <expr>  complete_info()["selected"] != "-1" ? "\" : "\u\"
let &cpo=s:cpo_save
unlet s:cpo_save
set cmdheight=2
set complete=.,w,b,u,t,kspell
set completefunc=thesaurus_query#auto_complete_integrate
set expandtab
set formatoptions=tcqrn1
set helplang=en
set hidden
set ignorecase
set listchars=tab:▸\ ,eol:¬
set matchpairs=(:),{:},[:],<:>
set modelines=0
set runtimepath=~/.config/nvim,~/.vim/plugged/vim-fugitive,~/.vim/plugged/vim-tmux-navigator,~/.vim/plugged/vim-airline,~/.vim/plugged/coc.nvim,~/.vim/plugged/ale,~/.vim/plugged/goyo.vim,~/.vim/plugged/vim-markdown,~/.vim/plugged/markdown-preview.nvim,~/.vim/plugged/thesaurus_query.vim,~/.vim/plugged/spelunker.vim,~/.vim/plugged/popup-menu.nvim,/etc/xdg/xdg-ubuntu/nvim,/etc/xdg/nvim,~/.local/share/nvim/site,/usr/share/ubuntu/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/var/lib/snapd/desktop/nvim/site,/usr/share/nvim/runtime,/usr/share/nvim/runtime/pack/dist/opt/matchit,/var/lib/snapd/desktop/nvim/site/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/usr/share/ubuntu/nvim/site/after,~/.local/share/nvim/site/after,/etc/xdg/nvim/after,/etc/xdg/xdg-ubuntu/nvim/after,~/.vim/plugged/vim-markdown/after,~/.vim/plugged/spelunker.vim/after,~/.config/nvim/after
set scrolloff=3
set shiftwidth=2
set shortmess=filnxtToOFc
set showmatch
set smartcase
set softtabstop=2
set tabstop=2
set textwidth=79
set updatetime=300
set visualbell
set window=38
set nowritebackup
" vim: set ft=vim :
